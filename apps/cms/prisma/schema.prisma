// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// stores allowed values for user roles
// enum : ['ADMIN', 'READ_ONLY', 'GENERAL']
model UserRole {
  id    String @id
  users User[]
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  role      String    @default("READ_ONLY")
  enabled   Boolean   @default(true)
  email     String    @unique
  password  String
  isDeleted Boolean   @default(false)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userRole UserRole  @relation(fields: [role], references: [id])
  keyToken KeyToken?
}

model KeyToken {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  publicKey         String? @unique
  privateKey        String? @unique
  refreshToken      String? @unique
  // JSON object
  // Currently, Prisma do not suport JSON type
  refreshTokensUsed String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AplicationMaster {
  id                 Int      @id @default(autoincrement())
  appName            String   @unique
  packageName        String
  termsOfUseID       Int
  licenseID          Int
  assetBundleIOS     String
  assetBundleAndroid String
  encryptKey         String
  outlineUrl         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  termOfUse TermsOfUse @relation(fields: [termsOfUseID], references: [id])
  license   License    @relation(fields: [licenseID], references: [id])

  acsta AcstaManagement[]
}

model AcstaManagement {
  id               Int       @id @default(autoincrement())
  managementName   String
  acstaName        String
  applicationID    Int
  thumbnailUrl     String
  scanImageUrl     String
  acstaBasicInfoID Int?
  scanOriginX      Float?
  scanOriginY      Float?
  scanWidth        Float?
  scanHeight       Float?
  scanColors       String?
  modeId           Int?
  dateStart        DateTime
  dateEnd          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  application AplicationMaster       @relation(fields: [applicationID], references: [id], onDelete: Cascade)
  performace  PerformaceManagement[]
}

model PerformaceTypeMaster {
  id        Int      @id @default(autoincrement())
  typeName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  performances PerformaceManagement[]
}

model PerformaceManagement {
  id                      Int      @id @default(autoincrement())
  name                    String
  performanceTypeMasterID Int
  assetBundleIOS          String
  acstaID                 Int
  assetBundleAndroid      String
  encryptKey              String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  performanceTypeMaster PerformaceTypeMaster @relation(fields: [performanceTypeMasterID], references: [id])
  acsta                 AcstaManagement      @relation(fields: [acstaID], references: [id])
}

model TermsOfUse {
  id            Int      @id @default(autoincrement())
  memo          String
  version       String
  content       String
  publishedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  applications AplicationMaster[]
}

model License {
  id            Int      @id @default(autoincrement())
  memo          String
  version       String
  content       String
  publishedDate DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  applications AplicationMaster[]
}

model IdLastestOfRecord {
  id        Int      @id @default(autoincrement())
  name      String
  idLastest Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForcedUpdateManagement {
  id               Int      @id @default(autoincrement())
  managementName   String
  operateSystem    String
  version          String
  publishedDate    DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

